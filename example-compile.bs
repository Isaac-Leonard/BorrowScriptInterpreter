type Putchar=(Int):Int
extern let putchar:Putchar=(x:Int):Int=>;
type Getchar=():Int
extern let getchar:Getchar=():Int=>;

type Sin=(Float):Float
extern let sin:Sin=(x:Float):Float=>;

let add=(x:Int, y:Int):Int=>{x+y}
let sayHello=()=>{
putchar(64+8)
putchar(64+5)
putchar(64+12)
putchar(64+12)
putchar(64+15)
putchar(10)
putchar(13)

}
let newLine=()=>{
putchar(10)
putchar(13)
}


type Puts=(Str):Int
let puts:Puts=(str:Str):Int=>;
type Strcat=(Str,Str):Int
extern const strcat:Strcat=(a:Str,b:Str):Int=>;
extern const memcpy:Strcat=(a:Str,b:Str):Int=>;

let main=():Int=>{
    let hello:Str="Hello"
    let world:Str="World"
    puts("Enter 'A' for 'hello' or any other letter for 'world'\n")
    let helloWorld="xxxxxxxxxxxx"
    if getchar()==65{
        puts(hello)
    }else{
        puts(world)
    }
    memcpy(hello, world)
    puts		  (world)
    newLine()	  
    0
}
