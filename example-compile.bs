type Putchar=(Int):Int
extern let putchar:Putchar=(x:Int):Int=>;
type Getchar=():Int
extern let getchar:Getchar=():Int=>;

type Sin=(Float):Float
extern let sin:Sin=(x:Float):Float=>;

let add=(x:Int, y:Int):Int=>{x+y}
let sayHello=()=>{
putchar(64+8)
putchar(64+5)
putchar(64+12)
putchar(64+12)
putchar(64+15)
putchar(10)
putchar(13)

}
let newLine=()=>{
putchar(10)
putchar(13)
}


type Puts=(Ptr):Int
let puts:Puts=(str:Ptr):Int=>;
type Ptrcat=(Ptr,Ptr):Int
extern const strcat:Ptrcat=(a:Ptr,b:Ptr):Int=>;
extern const memcpy:Ptrcat=(a:Ptr,b:Ptr):Int=>;

let main=():Int=>{
let x=0
    let hello="Hello"
    let world="World"
    puts("Enter 'A' for 'hello' or any other letter for 'world'\n")
    let helloWorld="xxxxxxxxxxxx"
    if getchar()==65{
        puts(hello)
    }else{
        puts(world)
    }
    hello=world	
    puts		  (world)
    puts(hello+" galaxy")
    while x<5{
        puts("abc")
	x=x+1
    }    	
    newLine()    
    0
}
