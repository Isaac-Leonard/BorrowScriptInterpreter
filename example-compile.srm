from "stdlib.srm" import {
    newLine, puts, getchar, putchar, midPoint
};
let addArr=(arr:[Int; 2]):Int=> arr[0]+arr[1]

let main=():Int => {
    let hello:Str<5> = "Hello"
    let world="World"
    puts("Enter 'A' for 'hello' or any other letter for 'world'\n")
    let helloWorld="xxxxxxxxxxxx"
    if getchar()==65{
        puts(hello)
    }else{
        puts(world)
    }
    1+1
    let y=3    
    let x:Int=0
    hello=world	
    puts		  (world)
    puts(hello+" galaxy")
    while 5>x{
        puts("abc")
	x=x+1
    }    	
    {
    x=0;
    while x<5 {
        putchar(hello[x])
	x=x+1
    }
    newLine();
    let union:Int|Null=null;
    if typeof union == typeof null {
        puts("null");
    } else{
        puts("int")
    }
    let arr:[Int; 3]=[4,8,7]
    let arr2:[[Int; 3]; 3] = [[1,2,3],[4,5,6],[7,8,9]]
    arr[1]=30
arr2[2]=arr;
arr2[0]=[4,3,2]
    puts(hello)
    newLine()
    let f=30.0;
    type Point={x:Float;y:Float}
    let p1:Point= {x:4.0, y:3.0+f};
    let p2:Point={x:0.0, y:100.0}
    midPoint(p1,p2)
    let div=(p1.x+p2.x)/2.0;
    newLine()
    let touple=[1,2]
    addArr(touple);
    let i00=arr2[0][0]
    arr2[1][1]=4
    0
    }
}
