type Putchar=(Char):Int
extern let putchar:Putchar=(x:Char):Int;
type Getchar=():Int
extern let getchar:Getchar=():Int;

type Sin=(Float):Float
extern let sin:Sin=(x:Float):Float;

let add=(x:Int, y:Int):Int=>{x+y}
let sayHello=()=>{
putchar(64+8 as Char)
putchar(64+5 as Char)
putchar(64+12 as Char)
putchar(64+12 as Char)
putchar(64+15 as Char)
putchar(10 as Char)
putchar(13 as Char)

}

extern let newLine=()=>{
putchar(10 as Char)
putchar(13 as Char)
};


type Puts=(Ptr):Int
extern let puts:Puts=(str:Ptr):Int;
type Ptrcat=(Ptr,Ptr):Int
extern const strcat:Ptrcat=(a:Ptr,b:Ptr):Int;
extern const memcpy:Ptrcat=(a:Ptr,b:Ptr):Int;
type Point={x:Float; y:Float};

extern const midPoint=(a:Point, b:Point):Point=>({
    x:(a.x+b.x)/2.0,
    y:(a.y+b.y)/2.0
});
